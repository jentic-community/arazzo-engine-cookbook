# arazzo-engine-cookbook/pyproject.toml (root project)
[build-system]
requires = ["hatchling>=1.18.0"]
build-backend = "hatchling.build"

[project]
name = "arazzo-engine-cookbook"
version = "0.1.0"
description = "A comprehensive collection of recipes for building API workflow orchestrations with Arazzo Engine"
readme = "README.md"
requires-python = ">=3.11,<3.13"
license = { text = "Apache-2.0" }
authors = [
    { name = "Rod Rivera", email = "rod@jentic.com" }
]
keywords = ["arazzo", "openapi", "api-orchestration", "workflows", "api-gateway"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: System :: Networking",
]

# Core dependencies shared across all recipes
dependencies = [
    "arazzo-runner<=1.0.0",
    "pyyaml>=6.0.0",
    "requests>=2.31.0",
]

# Development and testing dependencies
[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "ruff>=0.2.0",
    "mypy>=1.8.0",
    "isort>=5.12.0",
    "black>=23.0.0",
    "pre-commit>=3.0.0",
    "types-pyyaml>=6.0.0",
    "types-requests>=2.31.0",
]

# API provider integrations
stripe = [
    "stripe>=7.0.0",
]

github = [
    "PyGithub>=2.1.0",
]

slack = [
    "slack-sdk>=3.23.0",
]

shopify = [
    "ShopifyAPI>=12.0.0",
]

twilio = [
    "twilio>=8.10.0",
]

sendgrid = [
    "sendgrid>=6.10.0",
]

# Authentication and security
auth = [
    "oauthlib>=3.2.0",
    "requests-oauthlib>=1.3.0",
    "PyJWT>=2.8.0",
    "cryptography>=41.0.0",
]

# Monitoring and observability
monitoring = [
    "opentelemetry-api>=1.20.0",
    "opentelemetry-sdk>=1.20.0",
    "opentelemetry-instrumentation-requests>=0.41b0",
    "prometheus-client>=0.19.0",
]

# Testing utilities
testing = [
    "responses>=0.24.0",
    "pytest-mock>=3.12.0",
    "faker>=20.0.0",
    "freezegun>=1.4.0",
]

# Generator dependencies (for future generator recipes)
generator = [
    "arazzo-generator>=0.2.0",
    "openai>=1.0.0",
]

# Database integrations
database = [
    "sqlalchemy>=2.0.0",
    "psycopg2-binary>=2.9.0",
    "redis>=5.0.0",
]

# Data processing
data = [
    "pandas>=2.0.0",
    "numpy>=1.24.0",
]

# Meta-packages for common combinations
basic = [
    "arazzo-engine-cookbook[testing]",
]

intermediate = [
    "arazzo-engine-cookbook[basic,stripe,github,slack,auth]",
]

advanced = [
    "arazzo-engine-cookbook[intermediate,monitoring,database,data,generator]",
]

all = [
    "arazzo-engine-cookbook[stripe,github,slack,shopify,twilio,sendgrid,auth,monitoring,testing,generator,database,data,dev]",
]

[project.urls]
"Homepage" = "https://github.com/jentic/arazzo-engine-cookbook"
"Documentation" = "https://github.com/jentic/arazzo-engine-cookbook/docs"
"Repository" = "https://github.com/jentic/arazzo-engine-cookbook"
"Bug Tracker" = "https://github.com/jentic/arazzo-engine-cookbook/issues"
"Discussions" = "https://github.com/jentic/arazzo-engine-cookbook/discussions"
"Arazzo Engine" = "https://github.com/jentic/arazzo-engine"

# Build configuration - specify what to include in the package
[tool.hatch.build.targets.wheel]
include = ["recipes"]
artifacts = ["recipes/**/*"]

[tool.hatch.build]
exclude = [
    "/.github",
    "/.venv",
    "/.mypy_cache",
    "/.pytest_cache",
    "/.ruff_cache",
    "/docs/_build",
    "**/__pycache__",
    "**/*.pyc",
    "**/*.pyo",
    "**/*.pyd",
    "**/logs/*",
    "**/.DS_Store",
]

# Tool configurations shared across all recipes
[tool.ruff]
line-length = 100
target-version = "py311"
exclude = [
    ".venv",
    "logs",
    "__pycache__",
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "ANN", # flake8-annotations
    "S",   # flake8-bandit
    "A",   # flake8-builtins
]

[tool.ruff.lint.per-file-ignores]
"**/tests/**/*.py" = ["S101", "ANN"]  # Disable assert and annotation warnings in tests
"**/examples/**/*.py" = ["ANN"]  # Disable annotation warnings in examples

[tool.black]
line-length = 100
target-version = ["py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
    \.venv
    | logs
)/
'''

[tool.mypy]
python_version = "3.11"
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_optional = true
exclude = [
    "^logs/",
    "^\\.venv/",
]

[tool.pytest.ini_options]
testpaths = ["recipes"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--disable-warnings",
    "--tb=short",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "requires_api_key: marks tests that require API keys",
    "mock_only: marks tests that only run with mocked APIs",
    "real_api: marks tests that require real API access",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["recipes"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/logs/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip = [".venv", "logs"]